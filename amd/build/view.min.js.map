{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["define([\n  'core/ajax',\n  'core/str',\n  'core/notification',\n  'core/templates',\n  'mod_googlemeet/gapi'\n], function(Ajax, Str, Notification, Templates, gapi) {\n  return {\n    init: function(\n      clientId,\n      apiKey,\n      googlemeet,\n      hasRecording,\n      courseModuleId,\n      hasCapability\n    ) {\n\n      // GSI variables\n      let tokenClient;\n      let gapiInited = false;\n      let gisInited = false;\n\n      // Array of API discovery doc URLs for APIs used by the quickstart\n      var discoveryDocs = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\n\n      // Authorization scopes required by the API\n      var scope = 'https://www.googleapis.com/auth/drive';\n\n      // Meeting code\n      var meetingCode = googlemeet.url.substr(24, 12);\n\n      // Google Drive Meet Recordings folder owner email.\n      var ownerEmail;\n\n      // // Load strings\n      var notpossiblesync = '';\n      var notfoundrecordingsfolder = '';\n      var notfoundrecordingname = '';\n      var stror = '';\n      Str.get_strings([\n        {key: 'notpossiblesync', component: 'mod_googlemeet'},\n        {key: 'notfoundrecordingsfolder', component: 'mod_googlemeet'},\n        {key: 'notfoundrecordingname', component: 'mod_googlemeet'},\n        {key: 'or', component: 'mod_googlemeet'},\n      ]).done(function(strs) {\n        notpossiblesync = strs[0];\n        notfoundrecordingsfolder = strs[1];\n        notfoundrecordingname = strs[2];\n        stror = strs[3];\n      }).fail(Notification.exception);\n\n      // Elements references\n      var syncDriveButton = document.getElementById('id_syncdrivebutton');\n\n      /**\n       * Callback after 'Sync with Google Drive' button is clicked.\n       */\n      function gapiLoaded() {\n        gapi.load('client', initializeGapiClient);\n      }\n\n      /**\n       * Callback after the API client is loaded. Loads the\n       * discovery doc to initialize the API.\n       */\n      async function initializeGapiClient() {\n        await gapi.client.init({\n          apiKey: apiKey,\n          discoveryDocs: discoveryDocs,\n        });\n        gapiInited = true;\n        maybeEnableButtons();\n      }\n\n      /**\n       * Callback after 'Sync with Google Drive' button is clicked.\n       */\n      function gisLoaded() {\n        tokenClient = google.accounts.oauth2.initTokenClient({ // eslint-disable-line no-undef\n          client_id: clientId,\n          scope: scope,\n          callback: '', // defined later\n        });\n        gisInited = true;\n        maybeEnableButtons();\n      }\n\n      /**\n       * Enables user interaction after all libraries are loaded.\n       */\n      function maybeEnableButtons() {\n        if (gapiInited && gisInited) {\n          syncDriveButton.onclick = handleAuthClick;\n          syncDriveButton.disabled = false;\n          return;\n        }\n      }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      function handleAuthClick() {\n        tokenClient.callback = async (resp) => {\n          if (resp.error !== undefined) {\n            throw (resp);\n          }\n          handleSyncDrive();\n          return;\n        };\n\n        if (gapi.client.getToken() === null) {\n          // Prompt the user to select a Google Account and ask for consent to share their data\n          // when establishing a new session.\n          tokenClient.requestAccessToken({prompt: 'consent'});\n        } else {\n          // Skip display of account chooser and consent dialog for an existing session.\n          tokenClient.requestAccessToken({prompt: ''});\n        }\n      }\n\n      /**\n       * Initiates sync with Google Drive\n       */\n      function handleSyncDrive() {\n        getMeetFolder();\n        return;\n      }\n      // End new GSI process\n\n      /**\n       * Shows a loading on the screen\n       * @param {boolean} show\n       */\n      function showLoading(show) {\n        var googlemeetSyncImg = document.getElementById('googlemeet_syncimg');\n\n        if (show) {\n          googlemeetSyncImg.style.display = \"flex\";\n          syncDriveButton.disabled = true;\n        } else {\n          googlemeetSyncImg.style.display = \"none\";\n          syncDriveButton.disabled = false;\n        }\n      }\n\n      /**\n       * Append a pre-element to the body that contains the message\n       * provided as its text node. Used to display API call errors.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      function appendPre(message) {\n        var pre = document.getElementById('googlemeetcontentlog');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.style.display = \"block\";\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Hide the pre tag\n       */\n      function hidePre() {\n        var pre = document.getElementById('googlemeetcontentlog');\n        pre.style.display = \"none\";\n        pre.innerHTML = \"\";\n      }\n\n      /**\n       * Generates the shareable link to anyone with the link\n       * @param {string} fileId Google Drive recording ID\n       */\n      function setPermission(fileId) {\n        gapi.client.drive.permissions.create({\n          resource: {\n            'type': 'anyone',\n            'role': 'reader'\n          },\n          fileId: fileId,\n          fields: 'id',\n        }).then().catch();\n      }\n\n      /**\n       * Build the query to search for the recording name in Google Drive.\n       *\n       * @returns {string}\n       */\n      function getNameQuery() {\n        var query = \"and (name contains '\" + meetingCode + \"'\";\n        query += \" or name contains '\" + googlemeet.originalname + \"')\";\n\n        return query;\n      }\n\n      /**\n       * Receive recording time duration in milliseconds and format to string.\n       *\n       * @param {string} s The time in milliseconds.\n       * @returns {string} Formatted time. Example 1:01:20\n       */\n      function getTimeString(s) {\n        var secNum = Math.floor(parseInt(s, 10) / 1000);\n        var hours = Math.floor(secNum / 3600);\n        var minutes = Math.floor((secNum - (hours * 3600)) / 60);\n        var seconds = secNum - (hours * 3600) - (minutes * 60);\n\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n\n        if (hours > 0) {\n          if (minutes < 10) {\n            minutes = \"0\" + minutes;\n          }\n          return hours + ':' + minutes + ':' + seconds;\n        } else {\n          return minutes + ':' + seconds;\n        }\n      }\n\n      /**\n       * Render the recording table with the recordings coming from Google Drive.\n       * @param {array} recordings\n       */\n      function renderTemplate(recordings) {\n        Templates.render('mod_googlemeet/recordingstable', {\n          recordings: recordings,\n          coursemoduleid: courseModuleId,\n          hascapability: hasCapability\n        }).then(function(html, js) {\n          showLoading(false);\n\n          Templates.replaceNodeContents('#googlemeet_recordings_table', html, js);\n\n          document.getElementById('id_creatoremail').innerHTML = ownerEmail;\n          document.getElementById('id_lastsync').innerHTML = new Date().toLocaleString().substr(0, 16);\n          return;\n        }).fail(Notification.exception).fail(function() {\n          showLoading(false);\n        });\n      }\n\n      /**\n       * Get recordings from Google Drive\n       * @param {string} parents 'Meet Recordings' folder(s) ID(s)\n       */\n      function getFiles(parents) {\n        gapi.client.drive.files.list({\n          'q': \"(\" + parents + \")\" +\n            \" and trashed=false and mimeType='video/mp4' \" + getNameQuery(),\n          'pageSize': 1000,\n          'fields': \"files(id,name,permissionIds,createdTime,videoMediaMetadata,webViewLink)\"\n        }).then(function(response) {\n          var files = response.result.files;\n          if (files && files.length > 0) {\n            for (var i = 0; i < files.length; i++) {\n              var file = files[i];\n              if (!file.permissionIds.includes('anyoneWithLink')) {\n                setPermission(file.id);\n              }\n\n              files[i].recordingId = file.id;\n              files[i].duration = getTimeString(file.videoMediaMetadata.durationMillis);\n              files[i].createdTime = Math.floor(new Date(file.createdTime).getTime() / 1000);\n\n              delete (files[i].id);\n              delete (files[i].permissionIds);\n              delete (files[i].videoMediaMetadata);\n            }\n\n            Ajax.call([{\n              methodname: 'mod_googlemeet_sync_recordings',\n              args: {\n                googlemeetid: googlemeet.id,\n                creatoremail: ownerEmail,\n                files: files,\n                coursemoduleid: courseModuleId\n              }\n            }])[0].then(function(response) {\n              renderTemplate(response);\n              hasRecording = true;\n              return;\n            }).fail(Notification.exception).fail(function() {\n              showLoading(false);\n            });\n\n          } else {\n            var notfoundmsg = notfoundrecordingname + ' \"' + meetingCode + '\" ';\n            if (googlemeet.originalname) {\n              notfoundmsg += stror + ' \"' + googlemeet.originalname + '\"';\n            }\n            appendPre(notfoundmsg);\n            showLoading(false);\n\n            if (hasRecording) {\n              showLoading(true);\n              Ajax.call([{\n                methodname: 'mod_googlemeet_delete_all_recordings',\n                args: {\n                  googlemeetid: googlemeet.id,\n                  coursemoduleid: courseModuleId\n                }\n              }])[0].then(function(response) {\n                renderTemplate(response);\n                hasRecording = false;\n                showLoading(false);\n                return;\n              }).fail(Notification.exception).fail(function() {\n                showLoading(false);\n              });\n            }\n          }\n          return;\n        }).catch(function(error) {\n          showLoading(false);\n          appendPre(JSON.stringify(error.result.error, null, 2));\n        });\n      }\n\n      /**\n       * Checks if the owner of the folder is the same who created the room.\n       *\n       * @param {string} creatoremail Room creator email.\n       * @param {array} owners Folder owners list.\n       * @returns {boolean}\n       */\n      function isOwnerAndRoomCreator(creatoremail, owners) {\n        for (let i = 0; i < owners.length; i++) {\n          if (owners[i].me === true) {\n            return creatoremail === owners[i].emailAddress;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Get 'Meet Recordings' folder from Google Drive\n       */\n      function getMeetFolder() {\n        showLoading(true);\n        hidePre();\n        gapi.client.drive.files.list({\n          'q': \"name='Meet Recordings' and trashed=false\",\n          'pageSize': 1000,\n          'fields': \"nextPageToken, files(id,owners)\"\n        }).then(function(response) {\n          var files = response.result.files;\n\n          if (files && files.length > 0) {\n            var parents = '';\n\n            for (let i = 0; i < files.length; i++) {\n              if (isOwnerAndRoomCreator(googlemeet.creatoremail, files[i].owners)) {\n                ownerEmail = googlemeet.creatoremail;\n                parents += `parents='${files[i].id}'`;\n                if (i + 1 < files.length) {\n                  parents += ' or ';\n                }\n              }\n\n            }\n\n            if (parents) {\n              getFiles(parents);\n              return;\n            }\n\n            appendPre(notpossiblesync);\n            showLoading(false);\n          } else {\n            appendPre(notfoundrecordingsfolder);\n            showLoading(false);\n          }\n          return;\n        }).catch(function(error) {\n          showLoading(false);\n          appendPre(JSON.stringify(error.result.error, null, 2));\n        });\n      }\n\n      /**\n       *  On load, called to load the auth2 library and API client library.\n       */\n      gapiLoaded();\n      gisLoaded();\n    }\n  };\n});\n"],"names":["define","Ajax","Str","Notification","Templates","gapi","init","clientId","apiKey","googlemeet","hasRecording","courseModuleId","hasCapability","tokenClient","gapiInited","gisInited","ownerEmail","discoveryDocs","meetingCode","url","substr","notpossiblesync","notfoundrecordingsfolder","notfoundrecordingname","stror","get_strings","key","component","done","strs","fail","exception","syncDriveButton","document","getElementById","initializeGapiClient","client","maybeEnableButtons","onclick","handleAuthClick","disabled","callback","async","undefined","resp","error","pre","showLoading","style","display","innerHTML","drive","files","list","then","response","result","length","parents","i","isOwnerAndRoomCreator","creatoremail","owners","id","getNameQuery","file","permissionIds","includes","setPermission","recordingId","duration","getTimeString","videoMediaMetadata","durationMillis","createdTime","Math","floor","Date","getTime","call","methodname","args","googlemeetid","coursemoduleid","renderTemplate","notfoundmsg","originalname","appendPre","catch","JSON","stringify","getFiles","getToken","requestAccessToken","prompt","show","googlemeetSyncImg","message","textContent","createTextNode","appendChild","fileId","permissions","create","resource","fields","query","s","secNum","parseInt","hours","minutes","seconds","recordings","render","hascapability","html","js","replaceNodeContents","toLocaleString","me","emailAddress","load","google","accounts","oauth2","initTokenClient","client_id","scope"],"mappings":"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"}